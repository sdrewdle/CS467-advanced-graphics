
/**

void build_view_window() {
  int i;
  double x=0,y,z, norm[3];
  //hither plane
  view_window[0][0] = 0; view_window[0][1] = 0;
  view_window[0][2] = hither+1;
  view_window[0][3] = -view_window[0][2] * hither;

  //yonder plane
  view_window[1][0] = 0; view_window[1][1] = 0;
  view_window[1][2] = yon+1;
  view_window[1][3] = -view_window[1][2] * yon;

  y=tan(half_angle)/hither; z = hither;
  normal_pts(1,0,0, 0,0,0, x,y,z, view_window[2]);
  view_window[2][3] = 
    - view_window[2][0] * x
    - view_window[2][1] * y
    - view_window[2][2] * z;
  
  y = -y;
  normal_pts(1,0,0, 0,0,0, x,y,z, view_window[3]);
  view_window[3][3] = 
    - view_window[3][0] * x
    - view_window[3][1] * y
    - view_window[3][2] * z;

  x = -y; y=0;
  normal_pts(0,1,0, 0,0,0, x,y,z, view_window[4]);
  view_window[4][3] = 
    - view_window[4][0] * x
    - view_window[4][1] * y
    - view_window[4][2] * z;

  x = -x;
  normal_pts(0,1,0, 0,0,0, x,y,z, view_window[5]);
  view_window[5][3] = 
    - view_window[5][0] * x
    - view_window[5][1] * y
    - view_window[5][2] * z;
}


int in_view(double xyz[3]) {
double checkp[3] = {0,0,hither+yon/2};
  
double p,check;
int i;
for (i=0; i<6; i++) { //check edge planes
p = add(xyz,i);
check = add(checkp,i);
if(sgn(p) != sgn (check)) {return 0;}
}
return 1; //point is in view
}


double add(double xyz[3], int i){
return view_window[i][0] * xyz[0] +
view_window[i][1] * xyz[1] +
view_window[i][2] * xyz[2] +
view_window[i][3];
}
**/
